# Finds the .NET Core CLI

# This file can be configured with the following CMake variables:
# - DOTNET_ROOT_DIR
# - DOTNET_HOST_ROOT_DIR
# - DOTNET_HOST_INCLUDE_DIR
# - DOTNET_HOST_LIBRARY

# Or, alternatively, the following environment variables:
# - DOTNET_INSTALL_DIR
# - DOTNET_HOST_INSTALL_DIR
# - LIBRARY_PATH

include(FindPackageHandleStandardArgs)
find_package(PkgConfig QUIET)

pkg_check_modules(PC_DOTNET QUIET dotnet)

set(DOTNET_SEARCH_DIR ${DOTNET_ROOT_DIR} $ENV{DOTNET_INSTALL_DIR})
set(DOTNET_HOST_SEARCH_DIR ${DOTNET_HOST_ROOT_DIR} $ENV{DOTNET_HOST_INSTALL_DIR})

find_program(
  DOTNET_EXECUTABLE
  NAMES dotnet
  HINTS ${DOTNET_SEARCH_DIR}
)

if(DOTNET_EXECUTABLE)
  execute_process(
    COMMAND ${DOTNET_EXECUTABLE} --version
    OUTPUT_VARIABLE DOTNET_VERSION
  )
  string(STRIP "${DOTNET_VERSION}" DOTNET_VERSION)
endif()

if (WIN32)
  set(DOTNET_RUNTIME_OS "win")
elseif(APPLE)
  set(DOTNET_RUNTIME_OS "macos")
else()
  set(DOTNET_RUNTIME_OS "linux")
endif()

if(${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "AMD64" OR ${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "x86_64")
  set(DOTNET_RUNTIME_ARCH "x64")
elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "x86" OR ${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "x86")
  set(DOTNET_RUNTIME_ARCH "x86")
elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "ARM64" OR ${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "aarch64")
  set(DOTNET_RUNTIME_ARCH "arm64")
elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "ARM" OR ${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "armv8")
  set(DOTNET_RUNTIME_ARCH "arm")
else()
  set(DOTNET_RUNTIME_ARCH ${CMAKE_HOST_SYSTEM_PROCESSOR})
endif()

set(DOTNET_RUNTIME_ID "${DOTNET_RUNTIME_OS}-${DOTNET_RUNTIME_ARCH}")
set(DOTNET_RUNTIME_VERSION "5.0.1")

find_path(DOTNET_HOST_INCLUDE_DIR
  nethost.h
  HINTS ${DOTNET_HOST_SEARCH_DIR} ${PC_DOTNET_HOST_INCLUDEDIR} ${PC_DOTNET_HOST_INCLUDE_DIRS}
  PATH_SUFFIXES packs/Microsoft.NETCore.App.Host.${DOTNET_RUNTIME_ID}/${DOTNET_RUNTIME_VERSION}/runtimes/${DOTNET_RUNTIME_ID}/native
)

find_library(DOTNET_HOST_LIBRARY
  NAMES nethost libnethost
  HINTS ${DOTNET_HOST_SEARCH_DIR} ${PC_DOTNET_HOST_LIBDIR} ${PC_DOTNET_HOST_LIBRARY_DIRS}
  ENV LIBRARY_PATH
  PATH_SUFFIXES packs/Microsoft.NETCore.App.Host.${DOTNET_RUNTIME_ID}/${DOTNET_RUNTIME_VERSION}/runtimes/${DOTNET_RUNTIME_ID}/native
)

set(DOTNET_HOST_LIBRARIES ${DOTNET_HOST_LIBRARY})
set(DOTNET_HOST_INCLUDE_DIRS ${DOTNET_HOST_INCLUDE_DIR})
set(DOTNET_HOST_VERSION ${PC_DOTNET_HOST_VERSION})

find_package_handle_standard_args(Dotnet
  REQUIRED_VARS DOTNET_EXECUTABLE DOTNET_HOST_LIBRARIES DOTNET_HOST_INCLUDE_DIR
  VERSION_VAR DOTNET_VERSION
  HANDLE_COMPONENTS
)

if(DOTNET_FOUND)
  add_executable(Dotnet::Dotnet IMPORTED)
  set_target_properties(Dotnet::Dotnet
    PROPERTIES
      IMPORTED_LOCATION ${DOTNET_EXECUTABLE}
  )

  add_library(Dotnet::Host UNKNOWN IMPORTED)
  set_target_properties(Dotnet::Host PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${DOTNET_HOST_INCLUDE_DIRS}"
    IMPORTED_LOCATION "${DOTNET_HOST_LIBRARY}"
    INTERFACE_COMPILE_OPTIONS "${DOTNET_HOST_DEFINITIONS}"
  )
endif()

mark_as_advanced(DOTNET_EXECUTABLE DOTNET_HOST_INCLUDE_DIRS DOTNET_HOST_LIBRARIES)
